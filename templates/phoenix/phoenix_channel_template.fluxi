defmodule #ELIXIR_ROOTWeb.#NAMEChannel do
  use #ELIXIR_ROOTWeb, :channel
  alias #ELIXIR_ROOT.#NAME
  alias #ELIXIR_ROOT.#NAMERepo

  @impl true
  def join("#nAME:lobby", params, socket) do
    #NAMERepo.list_each_#nAME!()
    {:ok, socket |> assign( :#nAME_uuid, uuid) }
  end

  @impl true
  def join("#nAME:"<>uuid, params, socket) do
    {:ok, socket |> assign( :#nAME_uuid, uuid) }
  end

  @impl true
  def handle_in("init", payload, socket) do
    #nAME = #NAMERepo.get_#nAME_by_uuid(socket.assigns.#nAME_uuid)
    {:reply, {:ok, %{
      "#nAME" => #nAME
    }}, socket}
  end

  @impl true
  def handle_in("sync", #nAME = %{
#FIELDS_LIST_FOR_PATTERN_MATCHING_MAP
  }, socket) do
    if ( #NAMERepo.has_#nAME_with_uuid!(#nAME_uuid) ) do
        existing_#nAME = #NAMERepo.get_#nAME_by_uuid!(#nAME_uuid)
            #NAMERepo.update_#nAME_by_uuid(
                existing_#nAME,
                #nAME
            )
        broadcast socket, "model:updated", #nAME
    else
        case #NAMERepo.create_#nAME(#nAME) do
              {:ok, newly_created_#nAME} ->
                broadcast socket, "model:created", newly_created_#nAME
              {:error, %Ecto.Changeset{} = changeset} ->
        end
    end
    {:noreply, socket}
  end

end