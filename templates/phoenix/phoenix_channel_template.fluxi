defmodule #ELIXIR_ROOTWeb.#NAMEChannel do
  use #ELIXIR_ROOTWeb, :channel
  alias #ELIXIR_ROOT.#NAME
  alias #ELIXIR_ROOT.#NAMERepo

  @impl true
  def join("#nAME:"<>uuid, params, socket) do
    {:ok, socket |> assign( :#nAME_uuid, uuid) }
  end

  @impl true
  def handle_in("init", payload, socket) do
    #nAME = #NAMERepo.get_#nAME_by_uuid(socket.assigns.#nAME_uuid)
    {:reply, {:ok, %{
      "#nAME" => #nAME
    }}, socket}
  end

  @impl true
  def handle_in("sync", #nAME = %{
#FIELDS_LIST_FOR_PATTERN_MATCHING_MAP
  }, socket) do

    case #NAMERepo.get_#nAME_by_uuid!(#nAME_uuid) do
        existing_#nAME ->

        nil ->
            case #NameRepo.create_#nAME(#nAME) do
              {:ok, chat_message_delivery} ->
              {:error, %Ecto.Changeset{} = changeset} ->
            end
    end
    broadcast socket, "model:updated", payload
    {:noreply, socket}
  end

end